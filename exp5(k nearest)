//     Program to demonstrate k-Nearest Neighbor flowers classification 
# Step 1: Import required libraries
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score


# Step 2: Load the Iris dataset
iris = load_iris()
df = pd.DataFrame(iris.data, columns=iris.feature_names)
df['species'] = iris.target


# Optional: Visualize with seaborn
sns.pairplot(df, hue='species', palette='husl')
plt.suptitle("Iris Dataset Pairplot", y=1.02)
plt.show()


# Step 3: Split into features and target
X = df.iloc[:, :-1]   # features
y = df['species']     # target (0=setosa, 1=versicolor, 2=virginica)


# Step 4: Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# Step 5: Feature scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)


# Step 6: Train k-NN model
k = 3
knn = KNeighborsClassifier(n_neighbors=k)
knn.fit(X_train, y_train)


# Step 7: Make predictions
y_pred = knn.predict(X_test)


# Step 8: Evaluation
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred, target_names=iris.target_names))
print("Accuracy Score:", accuracy_score(y_test, y_pred))


# Step 9: Predict on new flower sample
new_flower = [[5.0, 3.4, 1.5, 0.2]]  # Like a Setosa
new_flower_scaled = scaler.transform(new_flower)
prediction = knn.predict(new_flower_scaled)
print("\nPredicted Species:", iris.target_names[prediction[0]])




