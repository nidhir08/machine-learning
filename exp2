import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Step 1: Prepare Data (Years of Experience vs Salary)
X = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]).reshape(-1, 1)  # Feature
y = np.array([50000, 55000, 65000, 70000, 75000, 80000, 85000, 90000, 95000, 100000])  # Target

# Step 2: Split Data into Training and Testing Sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 3: Train the Linear Regression Model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 4: Make Predictions
y_pred = model.predict(X_test)

# Step 5: Evaluate the Model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.2f}")
print(f"RÂ² Score: {r2:.2f}")
print(f"Predicted scores for test data: {y_pred}")

# Step 6: Visualize the Regression Line
plt.scatter(X, y, color='blue', label="Actual Data")
plt.plot(X, model.predict(X), color='red', linewidth=2, label="Regression Line")
plt.xlabel("Years of Experience")
plt.ylabel("Salary")
plt.legend()
plt.show()

# New test data (unseen values for prediction)
X_new = np.array([[11], [12], [15]])  # Example: Predict salary for 11, 12, and 15 years of experience

# Predict the exam scores for new inputs
y_new_pred = model.predict(X_new)

# Print the predictions
for i, experience in enumerate(X_new.flatten()):
    print(f"Predicted score for {experience} years of salary: {y_new_pred[i]:.3f}")
